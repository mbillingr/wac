#!/usr/bin/env python

watypes = { 'i': 'I32',
            'I': 'I64',
            'f': 'F32',
            'F': 'F64' }
ctypes = { None: 'void',
           'i': 'uint32_t',
           'I': 'uint64_t',
           'f': 'float',
           'F': 'double' }
ftypes = { 'i': 'uint32',
           'I': 'uint64',
           'f': 'f32',
           'F': 'f64' }

# thunk_out templates
thunk_out_0_c_template = """\
void thunk_out_0_{achars}(Module *m, Block *function, Type *type) {{
  ((void (*)({params}))function->func_ptr)({args});
  m->sp = m->sp + {sp_offset};
}}

"""

thunk_out_X_c_template = """\
void thunk_out_{rchar}_{achars}(Module *m, Block *function, Type *type) {{
  {rtype} res = (({rtype} (*)({params}))function->func_ptr)({args});
  m->sp += {sp_offset};
  m->stack[m->sp].value_type = {watype};
  m->stack[m->sp].value.{rfield} = res;
}}

"""

thunk_out_0_h_template = """\
void thunk_out_0_{achars}(Module *m, Block *function, Type *type);
"""

thunk_out_X_h_template = """\
void thunk_out_{rchar}_{achars}(Module *m, Block *function, Type *type);
"""

# thunk_in templates
thunk_in_0_c_template = """\
void thunk_in_0_{achars}({param_list}) {{
  Module *m = _wa_current_module_;
  {args_setup};
  interpret(m, -1);
}}

"""

thunk_in_X_c_template = """\
{rtype} thunk_in_{rchar}_{achars}({param_list}) {{
  Module *m = _wa_current_module_;
  {args_setup};
  interpret(m, -1);
  return m->stack[m->sp--].value.{rfield};
}}

"""

thunk_in_0_h_template = """\
void thunk_in_0_{achars}({param_list});
"""

thunk_in_X_h_template = """\
{rtype} thunk_in_{rchar}_{achars}({param_list});
"""


def thunk_out(c_file, h_file, ret, *args):
    data = {'rchar': ret,
            'achars': ''.join(args) or '0',
            'rtype': ctypes[ret],
            'params': ', '.join([ctypes[a] for a in args]),
            'args': ', '.join(['m->stack[m->sp-%d].value.%s' % (
                len(args)-i-1, ftypes[args[i]]) for i in range(len(args))]),
            }
    if ret:
        data['sp_offset'] = -len(args) + 1
        data['watype'] = watypes[ret]
        data['rfield'] = ftypes[ret]
        c_file.write(thunk_out_X_c_template.format(**data))
        h_file.write(thunk_out_X_h_template.format(**data))
    else:
        data['sp_offset'] = -len(args)
        c_file.write(thunk_out_0_c_template.format(**data))
        h_file.write(thunk_out_0_h_template.format(**data))

def thunk_in(c_file, h_file, ret, *args):
    data = {'rchar': ret,
            'achars': ''.join(args) or '0',
            'rtype': ctypes[ret],
            'param_list': ', '.join(["%s a%d" % (ctypes[args[i]], i)
                for i in range(len(args))]),
            'args_setup': ';\n  '.join(['m->stack[m->fp+%d].value.%s = a%d' % (
                i, ftypes[args[i]], i) for i in range(len(args))]),
            }
    if ret:
        data['rfield'] = ftypes[ret]
        c_file.write(thunk_in_X_c_template.format(**data))
        h_file.write(thunk_in_X_h_template.format(**data))
    else:
        c_file.write(thunk_in_0_c_template.format(**data))
        h_file.write(thunk_in_0_h_template.format(**data))

##############################

c_file = open('thunks.c', 'w')
c_file.write('// autogenerated by gen_thunks.py\n\n')
c_file.write('#include "wa.h"\n\n')
c_file.write('extern Module *_wa_current_module_;\n\n')

h_file = open('thunks.h', 'w')
h_file.write('// autogenerated by gen_thunks.py\n\n')
h_file.write('#include "wa.h"\n\n')

# thunk_outs of up to three arguments of any type
for r in [None, 'i', 'I', 'f', 'F']:
    thunk_out(c_file, h_file, r)
    for a in ['i', 'I', 'f', 'F']:
        thunk_out(c_file, h_file, r, a)
        for b in ['i', 'I', 'f', 'F']:
            thunk_out(c_file, h_file, r, a, b)
            for c in ['i', 'I', 'f', 'F']:
                thunk_out(c_file, h_file, r, a, b, c)

c_file.write('\n\n')
h_file.write('\n\n')

# a few specific thunk_outs with more than three arguments
thunk_out(c_file, h_file, None, 'i', 'i', 'i', 'i')
thunk_out(c_file, h_file, 'i', 'i', 'i', 'i', 'i')
thunk_out(c_file, h_file, 'i', 'i', 'i', 'i', 'i', 'i')
thunk_out(c_file, h_file, None, 'f', 'f', 'f', 'f')
thunk_out(c_file, h_file, None, 'F', 'F', 'F', 'F', 'F', 'F')

c_file.write('\n\n')
h_file.write('\n\n')

# thunk_ins of up to three arguments of any type
for r in [None, 'i', 'I', 'f', 'F']:
    thunk_in(c_file, h_file, r)
    for a in ['i', 'I', 'f', 'F']:
        thunk_in(c_file, h_file, r, a)
        for b in ['i', 'I', 'f', 'F']:
            thunk_in(c_file, h_file, r, a, b)
            for c in ['i', 'I', 'f', 'F']:
                thunk_in(c_file, h_file, r, a, b, c)

